//单行注释
/*
* 多行注释
* 多行注释
* */
//文档注释下面演示
/*
*@author xiashun
*@version 1.0
*/
//javadoc -d 文件夹名 -xx -yy Demo3.java
//javadoc -d d:\\test -xiashun -version ...
相对路径：从当前工作目录开始定位，形成的一个路径
绝对路径：从顶级目录开始定位，行程的路径
相对路径：..\..\ 两个点一个\表示返回上一级目录
绝对路径：d:\Programdata\anaconda\
byte、short、chat参与运算时，都会统一转换为int参与计算
int比short精度高，所以short在运算的时候是不能转int的
类型转换{
Integer.parseInteger(123)
Double.parseDouble(123)
Long.parseLong(123)
Float.parseFloat(123)
Byte.parseByte(123)
Boolean.parseBoolean("true")
}
输入操作 //简单的文本扫描器
导入java.util这个包里面的Scanner类
 import java.util.Scanner
Scanner myScanner=new Scanner(System.in);
int age =myScanner.nextInt();

多分支
if(){
}else if{
}else if{
}else{
}

switch判断结构--》
Switch（）表达式不支持double类型
case子句必须是常量或者可以转换的类型比如‘a'或者97
default类型是可选的
switch(char){
case 'a':
     System.out.println(a);
     break;
case 'b':
     System.out.println(b);
     break;
default:
     System.out.println("你输入的字符不正确。")
}
补充System.out.println()和
   System.out.print()的区别，
   多了个ln表示输出完了之后会自动换行。


方法重载：方法可以同名，但是参数不能一模一样，方便重复起名

可变参数：
int...表示接受的是可变参数，类型为int，可以接受多个int
使用可变参数时候，可以当做数组来使用，即nums可以当做数组
实现求和功能，用数组遍历求和即可
细节：可变参数的实参可以为数组
可以加入不可变参数，但是必须保证可变参数放在最后面，
因为都会被可变参数数组无限接收。
public int sum(int... nums){
    System.out.println(nums.length)
}

构造方法/构造器（是类的一种特殊方法，作用是完成对 新对象的初始化）{
看需求：前面我们创建人类对象时，是先把一个对象创建好后，再给他
姓名和年龄属性赋值，如果现在我要求，在创建人类的对象时，就直接指定
这个对象的年龄和姓名，该怎么做？这时候就可以使用构造器。
}
基本语法
[修饰符]方法名（形参列表){
方法体；
}
栗子：定义person类
class Person{
    String name;
    int age;
    //下面是构造器
    //1.构造器没有返回值也不能写void
    //2.构造器名称必须和类一直
    //3。（String PName, int PAge)是构造器形参列表，规则
    //和成员方法一样。
    public Person(String PName,int PAge){
        System .out.println("构造器被调用~~完成对象属性初始化");
        name=PName;
        age=PAge;
    }
}
//一但定义自己的构造器，默认的构造器就会被覆盖，
就不能使用默认无参构造器


//构造器命名繁琐
例如 public Person(String PName,int PAge){
name=PName;
age=PAge;
}
为啥不能写成
public Person(String name,int age){
name=name;
age=age;
}
因为会命名冲突，分辨不出来，根据就近原则，构造器name是局部变量，不是属性
=>引出this关键字解决
JVM会给每个对象分配this，仅仅代表当前对象。
this关键字，哪个对象调用就代表哪个对象
this关键字只能在方法里面使用


IDEA IDE（集成开发工具）

包的三个作用:
 1、区分名字相同的类
 2、当类很多时候，可以很好管理类。
 3、控制访问范围。

 包的本类就是创建不同的文件夹类存放不同的类。
 包的命名：一般是小写字母+小圆点
 一般是com.公司名.项目名.业务模块名
 com.sina.crm.user//用户模块
 com.sina.crm.order//订单模块
 com.sina.crm.utils//工具类

四种访问修饰符
public 、protected、 默认 、private
在同一个类中，什么都能访问。
在同一个包中，可以访问public，protected、和默认，不能访问private
在不同的包中，只能访问public修饰的属性和方法。
***-> 只有  默认  和   public  才可以修饰类


面向对象编程->封装
封装的理解和好处
1）隐藏实现细节：方法<-调用
2）可以对数据进行验证，保证安全合理

对内部隐私属性也封装起来，保证隐私数据不能轻易修改，不能直接调用
所以设置 例如 setName（）方法来修改姓名
//自己写setXxx()和getXxx*()太慢，可以使用快捷键

封装与构造器相结合，仍然可以使用构造器：
将set方法写在构造器中，仍然可以验证。
例如：
public Person(String name,int age,double salary){
setName(name);
setAge(age);
setSalary(salary);
}

面向对象编程->继承
基本语法：
class 子类 extends 父类{
}
1)子类机会自动拥有父类定义的属性和方法。
2）父类又叫超类，基类。
3）子类又叫派生类。

继承好处：
1）代码复用性大大提高
2）代码扩展性和维护性提高了

继承细节：
1。子类继承所有属性和方法，但是私有属性和方法不能在子类直接访问，
要通过父类提供的公共方法去访问。
父类: private N4=100
设置方法： public int getN4(){
             return N4;
             }
2.子类必须调用父类的构造器，完成父类的初始化。
3.当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会调用父类的
的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中去使用
super去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不通过
4. super在使用的时候必须放到构造器第一行
5.如果希望指定去调用父类某个构造器，则显式调用一下：super（参数列表）
6.super()和this()都只能放到构造器第一行，所以不能共存。
7.java所有类都是object类子类
8.父类构造器的调用不限于直接父类，将一直往上追溯到顶级父类object。
9.子类最多只能继承一个父类（指直接继承），即java中是单继承机制。



面向对象编程->多态 polymorphic
方法或者对象  具有多种形态。是面向对象的第三大特征，多态是建立在
封装和继承基础上的。
先看问题：
例如：
给猫猫喂饭
给狗狗喂饭
给猪猪喂饭
要重载好几个feed方法

问题是：代码复用性不高，而且不利于代码维护。

多态的具体体现：
1、方法的多态
重写和重载就体现多态
2.对象的多态（核心、困难、重点）
重要的几句话：
1）一个对象的编译类型和运行类型可以不一致
2）编译类型在定义对象时，就确定了，不能改变
3）运行类型是可以变化的
4）编译类型看定义时=号 的左边，运行类型看 = 号的 右边

//使用多态机制，可以统一的管理主人喂食的问题
//animal编译类型是Animal，可以指向（接受）Animal子类的对象
//food编译类型是Food，可以指向（接受）Food子类的对象。
public void feed(Animal animal,Food food){
    System.out.println("主人"+ name +" 给 "+
    animal.getName()+);
}

多态的前提是：两个对象（类）存在继承关系
多态的向上转型
1）本质：父类引用指向了子类的对象
2）语法：父类类型 引用名=new 子类类型（）；
3）特点：编译类型看左边，运行类型看右边。
       可以调用父类中的所有成员（需要遵守访问权限）
       不能调用子类中特有成员（因为调用是看你编译类型中有没有这个）
       最终运行效果看子类的具体实现；
  记住：属性看编译类型里面，方法看运行类型

多态的向下转型
1）语法：子类类型 引用名=new （子类类型）父类引用；
2）只能强转父类的引用，不能强转父类的对象
3）要求父类的引用必须指向的是当前目标类型的对象
4）当向下转型后可以调用子类类型中所有的成员

instanceof关键词
aa instanceof AA
判断aa是不是AA的运行类型或者子类

toString()方法
返回
return getClass().getName()+ "@"+Interger.toHwxString(hashCode());
//重写toString()，输出对象的属性
//使用快捷键即可，alt+insert -> toString

finalize()方法    定案，把...定下来
例子
Car bmw = new Car("宝马");
bmw = null;
当运行起来，这时候Car对象就是垃圾，垃圾回收器就要回收（销毁）对象
在销毁对象之前，会调用该对象的finalize方法

断点调试（debug）
F7跳入，F8跳过  shift+F8跳出  F9(resume,执行到下个断点）


